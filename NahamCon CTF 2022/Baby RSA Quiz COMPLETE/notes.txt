
https://github.com/Ganapati/RsaCtfTool
git clone https://github.com/Ganapati/RsaCtfTool.git
sudo apt-get install libgmp3-dev libmpc-dev
cd RsaCtfTool
pip3 install -r "requirements.txt"
python3 RsaCtfTool.py

I see you are ready to take my quiz! This quiz is comprised of three parts with
each part giving you a poor implementation of RSA. If you are unfamiliar with any
of these values given, it might be worthwhile to check out option 0 in the main
menu.

 ---------
| Part 1: |
 ---------
n = 160840626320039
e = 65537
ct = 79174321938528

What is the plaintext (in integer form)?

python3 ./RsaCtfTool.py -n 160840626320039 -e 65537 --uncipher 79174321938528

Unciphered data :
HEX : 0x68656865
INT (big endian) : 1751476325
INT (little endian) : 1701340520
utf-8 : hehe
utf-16 : 敨敨
STR : b'hehe'
HEX : 0x000068656865
INT (big endian) : 1751476325
INT (little endian) : 111499052318720
utf-8 : hehe
utf-16 : 敨敨
STR : b'\x00\x00hehe'
linux@ubuntu:~/Documents/RsaCtfTool$ 1751476325

 ---------
| Part 2: |
 ---------
n = 11618771257011339510416680693852988155495925231395535290246052003221497729814378464569864881012315708374803858940074574179196450632550789416816214577169248303137921736408030772301276213125311938079307258740455402125812223862940695407094053716186114985156223949084758853179840766843526321345444179499097418321724311225410302581140003881196544183187518209433432280400902179340563701935730235652348873744659394433430470883076453034835985942040068770090919738426781706268680941774387326519369609187678898685383679087982933726008777607292791976007292218747965536910715149317537318427955998552535871176706386670589594726613
e = 3
ct = 26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125


python3 ./RsaCtfTool.py -n 11618771257011339510416680693852988155495925231395535290246052003221497729814378464569864881012315708374803858940074574179196450632550789416816214577169248303137921736408030772301276213125311938079307258740455402125812223862940695407094053716186114985156223949084758853179840766843526321345444179499097418321724311225410302581140003881196544183187518209433432280400902179340563701935730235652348873744659394433430470883076453034835985942040068770090919738426781706268680941774387326519369609187678898685383679087982933726008777607292791976007292218747965536910715149317537318427955998552535871176706386670589594726613 -e 3 --uncipher 26480272848384180570411447917437668635135597564435407928130220812155801611065536704781892656033726277516148813916446180796750368332515779970289682282804676030149428215146347671350240386440440048832713595112882403831539777582778645411270433913301224819057222081543727263602678819745693540865806160910293144052079393615890645460901858988883318691997438568705602949652125


Unciphered data :
HEX : 0x736d6f6c206520646f20626520656666696369656e742c2062757420736d6f6c206520646f206e6f7420626520736563757265
INT (big endian) : 298062599825784604055397390266655425259311588881437826967301557850952291872230439875703282133697119479127924133583415243365
INT (little endian) : 261961771168827202570780088505689760442587578029363393966768605675521250694640019071099754486010230002112339670212644138355
utf-8 : smol e do be efficient, but smol e do not be secure
STR : b'smol e do be efficient, but smol e do not be secure'


 ---------
| Part 3: |
 ---------
q = p + 2
while !(isPrime(q)):
    q += 2
n = p*q


n = 129327218683822050725424986503896733176773557053790055999874749190846040729633679106631104350568355451722813353851466823534251045784164481556312446362776200046599744123243200074462881838272196732725649804247141072223914333818080352579678125694504608841900987360699993113803144034233741806365353946546602444197
e = 65537
ct = 90846338134235232350428750321147121137818450826508156841298980913599339756697614818223662604172301851690889698467266324909707976462063464007185549904475259577322536052279366995391139161780888405165122556000033379865637817492071624941028031454083459916342806842469095431135894174996281163108976925512234494783





python3 ./RsaCtfTool.py -n 129327218683822050725424986503896733176773557053790055999874749190846040729633679106631104350568355451722813353851466823534251045784164481556312446362776200046599744123243200074462881838272196732725649804247141072223914333818080352579678125694504608841900987360699993113803144034233741806365353946546602444197 -e 65537 --uncipher 90846338134235232350428750321147121137818450826508156841298980913599339756697614818223662604172301851690889698467266324909707976462063464007185549904475259577322536052279366995391139161780888405165122556000033379865637817492071624941028031454083459916342806842469095431135894174996281163108976925512234494783

Unciphered data :
HEX : 0x6f68686868206e6f6f6f6f6f206d79207072696d65737373732c207468657927726520746f6f20636c6f73656565656521
INT (big endian) : 4389692525618482461496676054452486268288388260878585075412513298672841265430477651614481831919140832735218408683300129
INT (little endian) : 1315872489288219161227428036849267924999352849892301688205008515343627568781862473449260683601698674789545589328078959
utf-8 : ohhhh nooooo my primessss, they're too closeeeee!
STR : b"ohhhh nooooo my primessss, they're too closeeeee!"
HEX : 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f68686868206e6f6f6f6f6f206d79207072696d65737373732c207468657927726520746f6f20636c6f73656565656521
INT (big endian) : 4389692525618482461496676054452486268288388260878585075412513298672841265430477651614481831919140832735218408683300129
INT (little endian) : 23451523799766398796712013720590298042223597142819739321988784182241443506525935190831485697887105043264844148010753643718010484792456318616484038666042598377278923883163604640333179991570356465738078102269180400663758801074455413749823463406194429351061633041946182692207761979061717735208454264748836388864
utf-8 : ohhhh nooooo my primessss, they're too closeeeee!
utf-16 : 漀桨桨渠潯潯⁯祭瀠楲敭獳獳‬桴祥爧⁥潴⁯汣獯敥敥Ⅵ
STR : b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ohhhh nooooo my primessss, they're too closeeeee!"

